
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import bill.*;
import java.awt.Desktop;
import java.util.concurrent.TimeUnit;

public class Room extends javax.swing.JFrame {

/*******************************************************************************************************************************
  Creates a new form Room
 **********************************************************************************************************************************/    
    public Room() {
        initComponents();
        conn = DBConnection.connectDB();
        this.setLocationRelativeTo(null);
        String sql = "SELECT * FROM room";
        
        updateRoomRecords();
        btnCHECKOUT.setVisible(false);
        jdcCheckIn.setMinSelectableDate(new Date());
        jdcCheckOut.setMinSelectableDate(new Date());
        
    }
    
/*******************************************************************************************************************************
   this method when called Exits the application
 **********************************************************************************************************************************/
     private void close(){
        WindowEvent we = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(we);
    }
/*******************************************************************************************************************************
  This  method is used to clear all the fields
 **********************************************************************************************************************************/
    private void clearFields(){
        txtFirstName.setText("");
        txtLastName.setText("");
        txtEmailID.setText("");
        txtPhoneNo.setText("");
        txtCity.setText("");
        txtaAddress.setText("");
        jdcCheckIn.setDate(null);
        jdcCheckOut.setDate(null);

        jcbRoomNo.setSelectedIndex(-1);
        jcbRoomType.setSelectedIndex(-1);
        spinChildrens.setValue(0);
        spinAdults.setValue(0);
        btnCHECKOUT.setVisible(false);
       
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        pnlX = new javax.swing.JPanel();
        lblClose = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl404 = new javax.swing.JLabel();
        lbl401 = new javax.swing.JLabel();
        lbl103 = new javax.swing.JLabel();
        lbl301 = new javax.swing.JLabel();
        lbl302 = new javax.swing.JLabel();
        lbl102 = new javax.swing.JLabel();
        lbl303 = new javax.swing.JLabel();
        lbl101 = new javax.swing.JLabel();
        lbl204 = new javax.swing.JLabel();
        lbl201 = new javax.swing.JLabel();
        lbl304 = new javax.swing.JLabel();
        lbl202 = new javax.swing.JLabel();
        lbl203 = new javax.swing.JLabel();
        lbl402 = new javax.swing.JLabel();
        lbl104 = new javax.swing.JLabel();
        lbl403 = new javax.swing.JLabel();
        pnlCustomerDetails = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaAddress = new javax.swing.JTextArea();
        spinChildrens = new javax.swing.JSpinner();
        lblCheckOutDate = new javax.swing.JLabel();
        lblNoOfChildrens = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jdcCheckIn = new com.toedter.calendar.JDateChooser();
        spinAdults = new javax.swing.JSpinner();
        jdcCheckOut = new com.toedter.calendar.JDateChooser();
        lblCheckInDate = new javax.swing.JLabel();
        lblRoomType = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblEmailID = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        btnCHECKIN = new javax.swing.JButton();
        lblLastName = new javax.swing.JLabel();
        txtEmailID = new javax.swing.JTextField();
        lblNoOfAdults = new javax.swing.JLabel();
        jcbRoomType = new javax.swing.JComboBox<>();
        lblCity = new javax.swing.JLabel();
        lblPhoneNo = new javax.swing.JLabel();
        txtPhoneNo = new javax.swing.JTextField();
        sepFirstName = new javax.swing.JSeparator();
        sepLastName = new javax.swing.JSeparator();
        sepEmailID = new javax.swing.JSeparator();
        sepPhoneNo = new javax.swing.JSeparator();
        sepCity = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        btnCHECKOUT = new javax.swing.JButton();
        jcbRoomNo = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(43, 87, 151));
        setUndecorated(true);

        jPanel2.setBackground(new java.awt.Color(36, 59, 85));
        jPanel2.setDoubleBuffered(false);

        pnlX.setBackground(new java.awt.Color(29, 35, 59));
        pnlX.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlXMouseDragged(evt);
            }
        });
        pnlX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlXMousePressed(evt);
            }
        });

        lblClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/left-arrow.png"))); // NOI18N
        lblClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblCloseMousePressed(evt);
            }
        });

        javax.swing.GroupLayout pnlXLayout = new javax.swing.GroupLayout(pnlX);
        pnlX.setLayout(pnlXLayout);
        pnlXLayout.setHorizontalGroup(
            pnlXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlXLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblClose, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        pnlXLayout.setVerticalGroup(
            pnlXLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblClose, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
        );

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl404.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl404.setToolTipText("104");
        lbl404.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl404MouseClicked(evt);
            }
        });
        jPanel1.add(lbl404, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 42, 66, 62));

        lbl401.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl401.setToolTipText("401");
        lbl401.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl401MouseClicked(evt);
            }
        });
        jPanel1.add(lbl401, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 66, 62));

        lbl103.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl103.setText("jLabel13");
        lbl103.setToolTipText("104");
        lbl103.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl103MouseClicked(evt);
            }
        });
        jPanel1.add(lbl103, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 440, 66, 62));

        lbl301.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl301.setText("jLabel13");
        lbl301.setToolTipText("301");
        lbl301.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl301MouseClicked(evt);
            }
        });
        jPanel1.add(lbl301, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 66, 62));

        lbl302.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl302.setToolTipText("302");
        lbl302.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl302MouseClicked(evt);
            }
        });
        jPanel1.add(lbl302, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 66, 62));

        lbl102.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl102.setText("jLabel13");
        lbl102.setToolTipText("102");
        lbl102.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl102MouseClicked(evt);
            }
        });
        jPanel1.add(lbl102, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, 66, 62));

        lbl303.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl303.setText("jLabel13");
        lbl303.setToolTipText("303");
        lbl303.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl303MouseClicked(evt);
            }
        });
        jPanel1.add(lbl303, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, 66, 62));

        lbl101.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl101.setText("jLabel13");
        lbl101.setToolTipText("101");
        lbl101.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl101MouseClicked(evt);
            }
        });
        jPanel1.add(lbl101, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 66, 62));

        lbl204.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl204.setText("jLabel13");
        lbl204.setToolTipText("204");
        lbl204.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl204MouseClicked(evt);
            }
        });
        jPanel1.add(lbl204, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 320, 66, 62));

        lbl201.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl201.setToolTipText("201");
        lbl201.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl201MouseClicked(evt);
            }
        });
        jPanel1.add(lbl201, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 66, 62));

        lbl304.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl304.setToolTipText("304");
        lbl304.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl304MouseClicked(evt);
            }
        });
        jPanel1.add(lbl304, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 179, 66, 62));

        lbl202.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl202.setToolTipText("202");
        lbl202.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl202MouseClicked(evt);
            }
        });
        jPanel1.add(lbl202, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 66, 62));

        lbl203.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl203.setToolTipText("203");
        lbl203.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl203MouseClicked(evt);
            }
        });
        jPanel1.add(lbl203, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 320, 66, 62));

        lbl402.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl402.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl402MouseClicked(evt);
            }
        });
        jPanel1.add(lbl402, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 66, 62));

        lbl104.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/deluxe_vacant.png"))); // NOI18N
        lbl104.setToolTipText("103");
        lbl104.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl104MouseClicked(evt);
            }
        });
        jPanel1.add(lbl104, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 440, 66, 62));

        lbl403.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rooms/superdeluxe_vacant.png"))); // NOI18N
        lbl403.setToolTipText("103");
        lbl403.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbl403MousePressed(evt);
            }
        });
        jPanel1.add(lbl403, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 66, 62));

        pnlCustomerDetails.setBackground(new java.awt.Color(57, 66, 100));
        pnlCustomerDetails.setForeground(new java.awt.Color(255, 255, 255));
        pnlCustomerDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setNextFocusableComponent(jdcCheckIn);

        txtaAddress.setColumns(20);
        txtaAddress.setRows(5);
        txtaAddress.setNextFocusableComponent(jdcCheckIn);
        jScrollPane1.setViewportView(txtaAddress);

        pnlCustomerDetails.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 245, 170, 54));

        spinChildrens.setNextFocusableComponent(btnCHECKIN);
        pnlCustomerDetails.add(spinChildrens, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 430, 40, -1));

        lblCheckOutDate.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblCheckOutDate.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckOutDate.setText("Check-Out Date");
        pnlCustomerDetails.add(lblCheckOutDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 317, -1, -1));

        lblNoOfChildrens.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblNoOfChildrens.setForeground(new java.awt.Color(255, 255, 255));
        lblNoOfChildrens.setText("No of Childrens");
        pnlCustomerDetails.add(lblNoOfChildrens, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 400, -1, -1));

        txtFirstName.setFont(new java.awt.Font("Averia Serif Libre", 0, 11)); // NOI18N
        txtFirstName.setForeground(new java.awt.Color(255, 255, 255));
        txtFirstName.setBorder(null);
        txtFirstName.setNextFocusableComponent(txtLastName);
        txtFirstName.setOpaque(false);
        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });
        pnlCustomerDetails.add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 94, 209, 20));

        jdcCheckIn.setNextFocusableComponent(jdcCheckOut);
        jdcCheckIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jdcCheckInMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jdcCheckInMousePressed(evt);
            }
        });
        jdcCheckIn.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcCheckInPropertyChange(evt);
            }
        });
        pnlCustomerDetails.add(jdcCheckIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 346, 210, -1));

        spinAdults.setNextFocusableComponent(spinChildrens);
        pnlCustomerDetails.add(spinAdults, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 430, 40, -1));

        jdcCheckOut.setNextFocusableComponent(jcbRoomType);
        pnlCustomerDetails.add(jdcCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 346, 180, -1));

        lblCheckInDate.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblCheckInDate.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckInDate.setText("Check-In Date");
        pnlCustomerDetails.add(lblCheckInDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 317, -1, -1));

        lblRoomType.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblRoomType.setForeground(new java.awt.Color(255, 255, 255));
        lblRoomType.setText("Room Type");
        pnlCustomerDetails.add(lblRoomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, -1, -1));

        lblAddress.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblAddress.setForeground(new java.awt.Color(255, 255, 255));
        lblAddress.setText("Address");
        pnlCustomerDetails.add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 216, -1, -1));

        lblFirstName.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblFirstName.setForeground(new java.awt.Color(255, 255, 255));
        lblFirstName.setText("First Name");
        pnlCustomerDetails.add(lblFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 66, 71, 22));

        txtLastName.setForeground(new java.awt.Color(255, 255, 255));
        txtLastName.setBorder(null);
        txtLastName.setNextFocusableComponent(txtEmailID);
        txtLastName.setOpaque(false);
        txtLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastNameActionPerformed(evt);
            }
        });
        pnlCustomerDetails.add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 94, 170, 20));

        lblEmailID.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblEmailID.setForeground(new java.awt.Color(255, 255, 255));
        lblEmailID.setText("E-mail ID");
        pnlCustomerDetails.add(lblEmailID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, -1, -1));

        txtCity.setForeground(new java.awt.Color(255, 255, 255));
        txtCity.setBorder(null);
        txtCity.setNextFocusableComponent(txtaAddress);
        txtCity.setOpaque(false);
        pnlCustomerDetails.add(txtCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 209, 21));

        btnCHECKIN.setText("CHECKIN");
        btnCHECKIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCHECKINActionPerformed(evt);
            }
        });
        pnlCustomerDetails.add(btnCHECKIN, new org.netbeans.lib.awtextra.AbsoluteConstraints(317, 529, 93, 34));

        lblLastName.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblLastName.setForeground(new java.awt.Color(255, 255, 255));
        lblLastName.setText("Last Name");
        pnlCustomerDetails.add(lblLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 68, -1, -1));

        txtEmailID.setForeground(new java.awt.Color(255, 255, 255));
        txtEmailID.setBorder(null);
        txtEmailID.setNextFocusableComponent(txtPhoneNo);
        txtEmailID.setOpaque(false);
        txtEmailID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailIDKeyReleased(evt);
            }
        });
        pnlCustomerDetails.add(txtEmailID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 179, 209, 21));

        lblNoOfAdults.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblNoOfAdults.setForeground(new java.awt.Color(255, 255, 255));
        lblNoOfAdults.setText("No of Adults");
        pnlCustomerDetails.add(lblNoOfAdults, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 400, -1, -1));

        jcbRoomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deluxe", "Super Deluxe" }));
        jcbRoomType.setSelectedIndex(-1);
        jcbRoomType.setNextFocusableComponent(spinAdults);
        pnlCustomerDetails.add(jcbRoomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 430, 112, -1));

        lblCity.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblCity.setForeground(new java.awt.Color(255, 255, 255));
        lblCity.setText("City");
        pnlCustomerDetails.add(lblCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 238, 30, -1));

        lblPhoneNo.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        lblPhoneNo.setForeground(new java.awt.Color(255, 255, 255));
        lblPhoneNo.setText("Phone No");
        pnlCustomerDetails.add(lblPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 150, -1, -1));

        txtPhoneNo.setForeground(new java.awt.Color(255, 255, 255));
        txtPhoneNo.setBorder(null);
        txtPhoneNo.setNextFocusableComponent(txtCity);
        txtPhoneNo.setOpaque(false);
        pnlCustomerDetails.add(txtPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 179, 170, 21));
        pnlCustomerDetails.add(sepFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 209, 10));
        pnlCustomerDetails.add(sepLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 120, 170, 19));
        pnlCustomerDetails.add(sepEmailID, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 209, 10));
        pnlCustomerDetails.add(sepPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(343, 200, 170, 10));
        pnlCustomerDetails.add(sepCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 209, 10));

        jLabel1.setFont(new java.awt.Font("Averia Serif Libre", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Room No");
        pnlCustomerDetails.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 74, -1));

        btnCHECKOUT.setText("CHECKOUT");
        btnCHECKOUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCHECKOUTActionPerformed(evt);
            }
        });
        pnlCustomerDetails.add(btnCHECKOUT, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 529, -1, 34));

        jcbRoomNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "101", "102", "103", "104", "201", "202", "203", "204", "301", "302", "303", "304", "401", "402", "403", "404" }));
        jcbRoomNo.setSelectedIndex(-1);
        pnlCustomerDetails.add(jcbRoomNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, -1, -1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addComponent(pnlCustomerDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
            .addComponent(pnlX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(pnlX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCustomerDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed

    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void txtLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastNameActionPerformed

    }//GEN-LAST:event_txtLastNameActionPerformed

    private void pnlXMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlXMousePressed
           mouseX = evt.getX();
           mouseY = evt.getY();
    }//GEN-LAST:event_pnlXMousePressed

    private void pnlXMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlXMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x-mouseX,y-mouseY);
    }//GEN-LAST:event_pnlXMouseDragged

    private void btnCHECKINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCHECKINActionPerformed
            try {
                String sql = "INSERT INTO room (firstname, lastname, emailid, phoneno, city, address, checkindate, checkoutdate, roomtype, noofadults, noofchildren, roomno,isVacant) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                preparedStatement = conn.prepareStatement(sql);
                
                preparedStatement.setString(1,txtFirstName.getText());
                preparedStatement.setString(2,txtLastName.getText());
                preparedStatement.setString(3,txtEmailID.getText());
                preparedStatement.setString(4,txtPhoneNo.getText());
                preparedStatement.setString(5,txtCity.getText()); 
                preparedStatement.setString(6,txtaAddress.getText());
               
                
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String checkinDate = sdf.format(jdcCheckIn.getDate());
                preparedStatement.setString(7,checkinDate);
                
                SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
                String checkoutDate = sd.format(jdcCheckOut.getDate());
             
                preparedStatement.setString(8,checkoutDate);
                
                preparedStatement.setString(9,jcbRoomType.getSelectedItem().toString());
                //int i= rs.getInt("noofadults");
                
                preparedStatement.setInt(10, (int)spinAdults.getValue());
                preparedStatement.setInt(11, (int)spinChildrens.getValue());
                preparedStatement.setString(12,jcbRoomNo.getSelectedItem().toString());
                preparedStatement.setInt(13, 1);
                
                boolean stmt = preparedStatement.execute();
                JOptionPane.showMessageDialog(null,"CheckIn successfull");
                
                //System.out.println(jcbRoomNo.getSelectedItem());
                if(jcbRoomNo.getSelectedItem().equals("401")){
                     lbl401.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
                if(jcbRoomNo.getSelectedItem().equals("402")){
                     lbl402.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
                if(jcbRoomNo.getSelectedItem().equals("403")){
                     lbl403.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("404")){
                     lbl404.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("301")){
                     lbl301.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("302")){
                     lbl302.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("303")){
                     lbl303.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("304")){
                     lbl304.setIcon(RoomConstants.SUPERDELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("201")){
                     lbl201.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("202")){
                     lbl202.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("203")){
                     lbl203.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("204")){
                     lbl204.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("101")){
                     lbl101.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("102")){
                     lbl102.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("103")){
                     lbl103.setIcon(RoomConstants.DELUXE_FILLED);
                }
               if(jcbRoomNo.getSelectedItem().equals("104")){
                     lbl104.setIcon(RoomConstants.DELUXE_FILLED);
              
                clearFields();
                
             }   
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Some error 1"  + e);
        }
    }//GEN-LAST:event_btnCHECKINActionPerformed

    public void updateRoomRecords(){
        int roomNo[] = new int[16];
        int i=0;
        try {
            String sql = "SELECT roomno FROM room where isVacant = 1";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            while(rs.next()){
                
                roomNo[i++] = rs.getInt(1);
                
            }       
            checkForVacancy(roomNo);
            
           for(int j =0 ; j<roomNo.length; j++){
               System.out.println(roomNo[j] + "   ");
           }
        }
            
         catch (Exception e) {
        }
}  
    
    private void lbl401MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl401MouseClicked
        clearFields(); 
        jcbRoomNo.setSelectedItem("401");
        jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 401";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                System.out.println(rs.getString("checkoutdate"));
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
            
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));

                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                                
                checkRooms();        
        }
         }catch (Exception e) {
        }
    }//GEN-LAST:event_lbl401MouseClicked

    private void lbl402MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl402MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("402");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
              
            String sql = "SELECT * FROM room WHERE roomno = 402";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
               
                 String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);

                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
               
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
         
         
    }//GEN-LAST:event_lbl402MouseClicked

    private void lbl403MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl403MousePressed
       clearFields();
       jcbRoomNo.setSelectedItem("403");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 403";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                System.out.println("Date " + dte.toString());
                jdcCheckOut.setDate(dte);
        
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
  
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                System.out.println("Dateeeeeeee "  + date.toString());
                jdcCheckIn.setDate(date);
                
                              
                checkRooms();
            }  
        }
       
         catch (Exception e) {}   
         
    }//GEN-LAST:event_lbl403MousePressed

    private void lbl404MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl404MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("404");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 404";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
  
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {}   
         
    }//GEN-LAST:event_lbl404MouseClicked

    private void lbl301MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl301MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("301");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 301";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
      
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) { }   
         
    }//GEN-LAST:event_lbl301MouseClicked

    private void lbl302MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl302MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("302");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 302";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
               
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                

                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
         
    }//GEN-LAST:event_lbl302MouseClicked

    private void lbl303MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl303MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("303");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 303";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                jdcCheckOut.setDate((new SimpleDateFormat("yyyy-MM-dd")).parse(rs.getString("checkoutdate")));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                System.out.println("Dateeeee" + date.toString());
                jdcCheckIn.setDate(date);
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
             JOptionPane.showMessageDialog(null, "Issue while fetching date" + e);
                            }   
    }//GEN-LAST:event_lbl303MouseClicked

    private void lbl304MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl304MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("304");
       jcbRoomType.setSelectedItem("Super Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 304";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
          
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
        
    }//GEN-LAST:event_lbl304MouseClicked

    private void lbl201MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl201MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("201");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 201";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
               
                 String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
              
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
               
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
        
    }//GEN-LAST:event_lbl201MouseClicked

    private void lbl202MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl202MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("202");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 202";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
              
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
         
    }//GEN-LAST:event_lbl202MouseClicked

    private void lbl203MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl203MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("203");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 203";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
               
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
        
    }//GEN-LAST:event_lbl203MouseClicked

    private void lbl204MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl204MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("204");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 204";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
               
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
        
    }//GEN-LAST:event_lbl204MouseClicked

    private void lbl101MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl101MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("101");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 101";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
              
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
      
    }//GEN-LAST:event_lbl101MouseClicked

    private void lbl102MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl102MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("102");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 102";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
               
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
      
    }//GEN-LAST:event_lbl102MouseClicked

    private void lbl103MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl103MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("103");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 103";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
            if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
            
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));
                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                
                
                checkRooms();
            }  
        }
       
         catch (Exception e) {
                            }   
         // TODO add your handling code here:
    }//GEN-LAST:event_lbl103MouseClicked

    private void lbl104MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl104MouseClicked
        clearFields();
        jcbRoomNo.setSelectedItem("104");
       jcbRoomType.setSelectedItem("Deluxe");
        try {
            String sql = "SELECT * FROM room WHERE roomno = 104";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
             if(rs.next()){
                txtFirstName.setText(rs.getString("firstname"));
                txtLastName.setText(rs.getString("lastname"));
                txtEmailID.setText(rs.getString("emailid"));
                txtPhoneNo.setText(rs.getString("phoneno"));
                txtCity.setText(rs.getString("city"));
                txtaAddress.setText(rs.getString("address"));
                
                                
                String dateValue = rs.getString("checkindate");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue);
                jdcCheckIn.setDate(date);
                
                String dateVal = rs.getString("checkoutdate");
                Date dte = new SimpleDateFormat("yyyy-MM-dd").parse(dateVal);
                jdcCheckOut.setDate(dte);
                
               // jcbRoomNo.setSelectedItem(rs.getString("roomno")); 
                //jcbRoomType.setSelectedItem(rs.getString("roomtype"));
                
                spinAdults.setValue(rs.getInt("noofadults"));
                spinChildrens.setValue(rs.getInt("noofchildren"));

                
                
                checkRooms();
            }  
        
        }
        
       
         catch (Exception e) {
                            }   
         // TODO add your handling code here:
    }//GEN-LAST:event_lbl104MouseClicked

    private void btnCHECKOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCHECKOUTActionPerformed
        createBill();    
        try {
                    String sql = "DELETE FROM room WHERE roomno = ?";
                    preparedStatement = conn.prepareStatement(sql);
                    preparedStatement.setString(1,jcbRoomNo.getSelectedItem().toString());
                    preparedStatement.execute();
                    checkRooms();
                    JOptionPane.showMessageDialog(null,"Checkout successfull");
                    checkRooms();
                    
                    clearFields();
                    sql = "SELECT * FROM room";
                    updateTable(sql);
                    
                    
                  } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,"DELETE issue: "+e.getMessage());
                }finally{
                    try {
                        preparedStatement.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null,"Error while closing statement:"+e.getMessage());
                    }
                }
            
    }//GEN-LAST:event_btnCHECKOUTActionPerformed

    private void txtEmailIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailIDKeyReleased
         
        
        String emailPatternString = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9\\+]+)*@[A-Za-z0-9-]+(\\.A-Za-z0-9+)*(\\.[A-za-z]{2,})$";
        Pattern emailPattern = Pattern.compile(emailPatternString);
        Matcher emailMatcher = emailPattern.matcher(txtEmailID.getText());
        if(!emailMatcher.matches()){
            sepEmailID.setBackground(Color.RED);
            txtEmailID.setForeground(Color.RED);
        }
        else{
            sepEmailID.setBackground(Color.WHITE);
            txtEmailID.setForeground(Color.WHITE);
        }
    }//GEN-LAST:event_txtEmailIDKeyReleased

    private void lblCloseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCloseMousePressed
        this.dispose();
        try {
            dashboard = new Dashboard();
        } catch (SQLException ex) {
            Logger.getLogger(Room.class.getName()).log(Level.SEVERE, null, ex);
        }
        dashboard.setVisible(true);        
    }//GEN-LAST:event_lblCloseMousePressed
 
/*******************************************************************************************************************************
 This method is used to create a bill when customer checkouts.
 **********************************************************************************************************************************/
    
    public void createBill(){
        cost = JOptionPane.showInputDialog("Enter the amount:");
        String name = txtFirstName.getText() + txtLastName.getText();
        String email = txtEmailID.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String checkinDate = sdf.format(jdcCheckIn.getDate());
        String checkoutDate = sdf.format(jdcCheckOut.getDate());
        long diff = jdcCheckOut.getDate().getTime() - jdcCheckIn.getDate().getTime();
        int totalNoOfDays = (int) TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
        Bill b = new Bill();
        b.addOrder(checkinDate, Double.parseDouble(cost), checkoutDate, totalNoOfDays, name, email);
        b.createBill();
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(MyConstants.PDFFILE);
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(null, "Issue while previewing" + ex);
            }
        }
    }

    private void jdcCheckInMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jdcCheckInMousePressed
        
    }//GEN-LAST:event_jdcCheckInMousePressed

    private void jdcCheckInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jdcCheckInMouseClicked
        
    }//GEN-LAST:event_jdcCheckInMouseClicked

    private void jdcCheckInPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcCheckInPropertyChange
        System.out.println("Insideeeee");
        checkDate();
        checkRooms();
    }//GEN-LAST:event_jdcCheckInPropertyChange
/*******************************************************************************************************************************
  Whenever entry of customer is made, this methods update the entry of customer in the table.
 **********************************************************************************************************************************/
     public void updateTable(String sql){
         try {           
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, " ISSUE : " + e);
        }finally{
            try {
                rs.close();
                preparedStatement.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Problem in closing rs or preparedStatement:");
            }
        }
     }
/*******************************************************************************************************************************
  This method when called changes the label of room from available to filled room.
 **********************************************************************************************************************************/
 
    private void checkForVacancy(int roomNo[]){
        int i = 0;
        for(i = 0; i<roomNo.length; i++)
            if(roomNo[i] == 101){
               lbl101.setIcon(RoomConstants.DELUXE_FILLED);
            }else if(roomNo[i] == 102 ){
                lbl102.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 103 ){
                lbl103.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 104 ){
                lbl104.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 201 ){
                lbl201.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 202 ){
                lbl202.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 203 ){
                lbl203.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 204 ){
                lbl204.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo[i] == 301 ){
                lbl301.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 302 ){
                lbl302.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 303 ){
                lbl303.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 304 ){
                lbl304.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 401 ){
                lbl401.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 402 ){
                lbl402.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 403 ){
                lbl403.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo[i] == 404 ){
                lbl404.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
          
    }
   /*******************************************************************************************************************************
  this method is used to check the rooms that are available
 **********************************************************************************************************************************/
    private void checkRooms(){
        try {
          String sql = "SELECT isVacant FROM room";
          preparedStatement = conn.prepareStatement(sql);
          rs = preparedStatement.executeQuery();  
          
          while(rs.next()){
            if(rs.getBoolean(1) == true){
                btnCHECKOUT.setVisible(true);
            }
          }
        } catch (Exception e) {
     }
   }
/*******************************************************************************************************************************
  This method is used to check the checkindate. 
 **********************************************************************************************************************************/
    private void checkDate(){
        try {
            System.out.println("inside checkdate");
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String strDate = sdf.format(jdcCheckIn.getDate());
                Date key = sdf.parse(strDate);
                java.sql.Date sqlStartDate = new java.sql.Date(key.getTime());
                System.out.println(sqlStartDate);
                String sql = "SELECT * FROM room WHERE checkindate >= ?" ;
  
                preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setDate(1 ,sqlStartDate);
                rs = preparedStatement.executeQuery(sql);
                while(rs.next()){
                    System.out.println("test");
                    System.out.println(rs.getString(7));
                }
                        
                }
        catch(NullPointerException e){}
         catch (Exception e) {
             JOptionPane.showMessageDialog(null, e);
        }
    }
    /*******************************************************************************************************************************
 This method is used to change the label of the freerooms that are avaialble in hotel.
 **********************************************************************************************************************************/
    public void freeRooms(){
        lbl101.setIcon(RoomConstants.DELUXE_VACANT);
        lbl102.setIcon(RoomConstants.DELUXE_VACANT);
        lbl103.setIcon(RoomConstants.DELUXE_VACANT);
        lbl104.setIcon(RoomConstants.DELUXE_VACANT);
        lbl201.setIcon(RoomConstants.DELUXE_VACANT);
        lbl202.setIcon(RoomConstants.DELUXE_VACANT);
        lbl203.setIcon(RoomConstants.DELUXE_VACANT);
        lbl204.setIcon(RoomConstants.DELUXE_VACANT);
        lbl301.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl302.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl303.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl304.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl401.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl402.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl403.setIcon(RoomConstants.SUPERDELUXE_VACANT);
        lbl404.setIcon(RoomConstants.SUPERDELUXE_VACANT);
    
    }
/*******************************************************************************************************************************
  this method is used to check the room status whether the room is vacant or not.
 **********************************************************************************************************************************/
    private void roomStatus(){
        try {
            String sql = "SELECT roomno from room WHERE isVacant = 1";
            preparedStatement = conn.prepareStatement(sql);
            rs = preparedStatement.executeQuery(sql);
            while(rs.next()){
                checkVacant(rs.getInt(1));
            }
        } catch (Exception e) {
        }
    
    
    }
/*******************************************************************************************************************************
 This method is used to check the vacany of the rooms and according to that it chenges the color of labelroomno.
 **********************************************************************************************************************************/
    public void checkVacant(int roomNo){
            if(roomNo == 101){
               lbl101.setIcon(RoomConstants.DELUXE_FILLED);
            }else if(roomNo == 102 ){
                lbl102.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 103 ){
                System.out.println("filled");
                lbl103.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 104 ){
                lbl104.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 201 ){
                System.out.println("filled 201");
                lbl201.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 202 ){
                lbl202.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 203 ){
                lbl203.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 204 ){
                lbl204.setIcon(RoomConstants.DELUXE_FILLED);
            }
            else if(roomNo == 301 ){
                lbl301.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 302 ){
                lbl302.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 303 ){
                lbl303.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 304 ){
                lbl304.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 401 ){
                lbl401.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 402 ){
                lbl402.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 403 ){
                lbl403.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
            else if(roomNo == 404 ){
                lbl404.setIcon(RoomConstants.SUPERDELUXE_FILLED);
            }
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Window".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCHECKIN;
    private javax.swing.JButton btnCHECKOUT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbRoomNo;
    private javax.swing.JComboBox<String> jcbRoomType;
    private com.toedter.calendar.JDateChooser jdcCheckIn;
    private com.toedter.calendar.JDateChooser jdcCheckOut;
    private javax.swing.JLabel lbl101;
    private javax.swing.JLabel lbl102;
    private javax.swing.JLabel lbl103;
    private javax.swing.JLabel lbl104;
    private javax.swing.JLabel lbl201;
    private javax.swing.JLabel lbl202;
    private javax.swing.JLabel lbl203;
    private javax.swing.JLabel lbl204;
    private javax.swing.JLabel lbl301;
    private javax.swing.JLabel lbl302;
    private javax.swing.JLabel lbl303;
    private javax.swing.JLabel lbl304;
    private javax.swing.JLabel lbl401;
    private javax.swing.JLabel lbl402;
    private javax.swing.JLabel lbl403;
    private javax.swing.JLabel lbl404;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCheckInDate;
    private javax.swing.JLabel lblCheckOutDate;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblClose;
    private javax.swing.JLabel lblEmailID;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblNoOfAdults;
    private javax.swing.JLabel lblNoOfChildrens;
    private javax.swing.JLabel lblPhoneNo;
    private javax.swing.JLabel lblRoomType;
    private javax.swing.JPanel pnlCustomerDetails;
    private javax.swing.JPanel pnlX;
    private javax.swing.JSeparator sepCity;
    private javax.swing.JSeparator sepEmailID;
    private javax.swing.JSeparator sepFirstName;
    private javax.swing.JSeparator sepLastName;
    private javax.swing.JSeparator sepPhoneNo;
    private javax.swing.JSpinner spinAdults;
    private javax.swing.JSpinner spinChildrens;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtEmailID;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPhoneNo;
    private javax.swing.JTextArea txtaAddress;
    // End of variables declaration//GEN-END:variables
private int mouseX,mouseY;
private PreparedStatement preparedStatement = null;
private Connection conn = null;
private ResultSet rs = null;
private int count;
int roomNo[],i;
Dashboard dashboard;
private String cost = null;
}
